#!/usr/bin/env ruby
# frozen_string_literal: true

# STDLIB
require 'fileutils'
require 'find'
require 'optparse'
require 'pathname'
require 'yaml'

# RUBYGEMS
require 'rmagick'
require 'dzt'

# ImageResizer
#
# Generates a variety of output files from a folder of source images, including
# large and small images as well as a set of tiles for deep-zoom viewing. A YAML
# data file with pixel dimensions for each view will also be generated.
#
# This application expects images to be provided in the following format:
#
# {number}__{face}.tif or {number}__{face}__{modifier}.tif
# By default the faces we are looking for are main, top, bottom, and profile
#
module ImageResizer
  MAX_CAT_NUMBER    = 631
  MAIN_IMAGE_WIDTH  = 2000
  THUMB_IMAGE_WIDTH = 500
  FACES             = [:main, :profile, :top, :bottom].freeze

  # Custom error class
  class MissingDirectoryError < ArgumentError
    def message
      <<~MSG
        Please provide an input and output directory.
        Run image_resizer.rb --help for usage instructions.
      MSG
    end
  end

  # Custom error class
  class InvalidDirectoryError < ArgumentError
    def message
      <<~MSG
        Please provide a valid input and output directory.
        Run image_resizer.rb --help for usage instructions.
      MSG
    end
  end

  # App
  #
  # Handle input from user (input/output dirs). Loop through a collection of
  # files and instantiate Artifact objects. Also responsible for managing
  # directories and navigating the filesystem.
  #
  class App
    attr_reader :input, :output
    attr_accessor :artifacts

    def initialize(args={})
      @input = Pathname.new(args[:input])
      @output = Pathname.new(args[:output])
      @artifacts = []

      prepare_directories
      prepare_images
      write_files
    end

    private

    def prepare_images
      puts 'Preparing images.'
      (1..MAX_CAT_NUMBER).each do |n|
        puts "Generating views for cat. #{n}"
        # Instantiate new Artifact objects here
        images = Find.find(input).grep(/^#{input}\/#{n}__/i)
        next if images.empty?
        artifacts << Artifact.new(n, images)
      end
    end

    def prepare_directories
      puts 'Preparing Directories.'
      raise InvalidDirectoryError unless input.directory?

      unless output.directory?
        puts "Creating output directory #{output}."
        output.mkdir
      end

      prepare_subdirectories
    end

    def prepare_subdirectories
      Dir.chdir output do
        Dir.mkdir('main') unless Dir.exist?('main')
        Dir.mkdir('thumbs') unless Dir.exist?('thumbs')
        Dir.mkdir('tiles') unless Dir.exist?('tiles')
      end
    end

    def generate_main_images
      artifacts.each do |artifact|
        Dir.chdir(File.join(output, 'main')) do
          puts "Writing main image for #{artifact.number}"
          artifact.write_main_image!
        end
      end
    end

    def generate_thumb_images
      artifacts.each do |artifact|
        Dir.chdir(File.join(output, 'thumbs')) do
          puts "Writing thumbnail image for #{artifact.number}"
          artifact.write_thumb_image!
        end
      end
    end

    def generate_tiles
      artifacts.each do |artifact|
        Dir.chdir(File.join(output, 'tiles')) do
          puts "Writing image tiles for #{artifact.number}"
          artifact.write_tiles!
        end
      end
    end

    def write_files
      generate_main_images
      generate_thumb_images
      generate_tiles
      generate_manifest
    end

    # Writing to STDOUT for now; write to a text file instead.
    def generate_manifest
      data = []
      artifacts.each do |artifact|
        data << artifact.manifest_data
      end

      File.open('manifest.yml', 'w') { |f| f.puts data.to_yaml }
    end
  end

  # Artifact
  #
  # Contains a series of Views (top, bottom, profile, main, etc.) of a given
  # catalogue item (numbered). Has methods to handle creating derivitave assets
  # for each View in its collection. This class is the only one that should be
  # calling image manipulation methods from DZT or RMagick.
  #
  class Artifact
    attr_reader :number, :images

    # Simple data-storage class that stores a face name (main, top, profile)
    # and a file path to an image, along with image dimensions
    View = Struct.new(:face, :path, :width, :height)

    # Initialize a new Artifact with a catalogue number and an array of images
    def initialize(number, images=[])
      @number = number
      @images = generate_views(images)
    end

    def write_main_image!
      main_img = images.find { |i| i.face == 'main' }
      unless main_img.nil?
        magick_img  = Magick::Image.read(main_img.path).first
        output_name = "#{number}.jpg"

        magick_img.resize_to_fit!(2000)
        magick_img.write(File.join(Dir.pwd, output_name))
        magick_img.destroy!
      end
    end

    def write_thumb_image!
      top_img = images.find { |i| i.face == 'top' }

      unless top_img.nil?
        magick_img  = Magick::Image.read(top_img.path).first
        output_name = "#{number}.jpg"

        magick_img.resize_to_fit!(500)
        magick_img.write(File.join(Dir.pwd, output_name))
        magick_img.destroy!
      end
    end

    def write_tiles!
      images.each do |i|
        face = i.face
        path = i.path
        puts `dzt slice "#{path}" --output='./#{number}/#{face}' --format=jpg --tile-size=256 --overwrite=true`
      end
    end

    # Return a data hash for later YAML serialization.
    # Fancy map/tap logic is just a way of stripping an unneeded key/value
    # pair from the hash and returning the resulting hash instead of the
    # value of the removed key (Hash#delete does the latter).
    def manifest_data
      image_data = images.map(&:to_h)
      {
        cat: number,
        images: image_data.map { |h| h.tap { |hs| hs.delete(:path) } }
      }
    end

    private

    # Use a regular expression to find the 'face' portion of each filename
    # in the image set, and then create a View object for each one.
    def generate_views(images)
      regex = /(?<face>(?<=__)[A-z]+)/i
      images.map do |i|
        regex.match(i)
        face = $LAST_MATCH_INFO['face']
        path = Pathname.new(i).realpath
        width, height = image_dimensions(path)
        View.new(face, path, width, height)
      end
    end

    # Use RMagick to get the pixel dimensions of an image.
    def image_dimensions(image)
      magick_img = Magick::Image.ping(image).first
      width = magick_img.columns
      height = magick_img.rows
      magick_img.destroy!

      [width, height]
    end
  end
end

# Command-line Interface
#
# Using OptionParser for the simplest possible Ruby CLI right now. User should
# pass in an input and output path. Input path must already be a directory;
# output path can be generated if it does not already exist. Some handling of
# custom error classes as well to print out helpful error messages if invalid
# arguments are provided by the user.
#
options = {}

# rubocop:disable LineLength
begin
  OptionParser.new do |parser|
    parser.banner = 'Usage: image_resizer.rb [options]'
    parser.on('-h', '--help', 'Show this help message') { puts parser }
    parser.on('-i', '--input DIR', 'Input directory containing images') { |v| options[:input] = v }
    parser.on('-o', '--output DIR', 'Location to output new files') { |v| options[:output] = v }
  end.parse!
  raise ImageResizer::MissingDirectoryError if options[:input].nil? || options[:output].nil?
rescue ImageResizer::MissingDirectoryError => e
  puts e.message
  exit 0
rescue ImageResizer::InvalidDirectoryError => e
  puts e.message
  exit 0
end
# rubocop:enable LineLength

ImageResizer::App.new(options)
